"use strict";(self.webpackChunkmy_site=self.webpackChunkmy_site||[]).push([[6448],{2272:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var s=t(4848),r=t(8453);const o={slug:"/code_examples/php/register_and_get_jwt",title:"Register a WordPress user with PHP and get the jwt",sidebar_position:1,author:"Nicu Micle",author_url:"https://github.com/nicumicle"},a=void 0,i={id:"code_examples/php/Register_and_get_token",title:"Register a WordPress user with PHP and get the jwt",description:"Introduction",source:"@site/docs/code_examples/php/Register_and_get_token.md",sourceDirName:"code_examples/php",slug:"/code_examples/php/register_and_get_jwt",permalink:"/docs/code_examples/php/register_and_get_jwt",draft:!1,unlisted:!1,editUrl:"https://github.com/simple-jwt-login/website/tree/main/docs/code_examples/php/Register_and_get_token.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{slug:"/code_examples/php/register_and_get_jwt",title:"Register a WordPress user with PHP and get the jwt",sidebar_position:1,author:"Nicu Micle",author_url:"https://github.com/nicumicle"},sidebar:"tutorialSidebar",previous:{title:"Code Examples",permalink:"/docs/code-examples/"}},l={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Getting Started: Registering a WordPress User",id:"getting-started-registering-a-wordpress-user",level:2},{value:"Acquiring the JWT",id:"acquiring-the-jwt",level:2},{value:"Validation Through Test Call: Create a new WordPress Post",id:"validation-through-test-call-create-a-new-wordpress-post",level:2},{value:"Full Example",id:"full-example",level:2}];function p(e){const n={admonition:"admonition",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsx)(n.p,{children:"In the dynamic realm of WordPress development, user authentication plays a pivotal role."}),"\n",(0,s.jsx)(n.p,{children:"One powerful tool in this arena is the Simple JWT Login plugin, offering seamless integration of JSON Web Tokens (JWT) for secure user registration and authentication."}),"\n",(0,s.jsx)(n.p,{children:"In this article, we'll walk through the process of crafting a simple script to register a WordPress user, obtain a JWT, and validate its authenticity through a test call."}),"\n",(0,s.jsx)(n.p,{children:"For this example, we can create a helper function, that will do the actual call:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"<?php\n\n/**\n * @param $method string Can be one of the following: GET, POST, PUT, DELETE\n * @param $endpoint string Endpoint where we will do the call\n * @param $data array Parameters that needs to be sent to the endpoint\n * @param $headers array Request headers\n * @return string\n * @throws \\Exception\n *\n */\nfunction call($method, $endpoint, $data = array(), $headers = array())\n{\n    // Initialize cURL session\n    $ch = curl_init();\n\n    // Set the cURL options\n    curl_setopt($ch, CURLOPT_URL, $endpoint);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, strtoupper($method));\n    curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));\n    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n\n    // Execute cURL session and get the result\n    $result = curl_exec($ch);\n\n    // Check for cURL errors\n    if (curl_errno($ch)) {\n        throw new \\Exception(curl_error($ch));\n    }\n\n    // Close cURL session\n    curl_close($ch);\n\n    return $result;\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"getting-started-registering-a-wordpress-user",children:"Getting Started: Registering a WordPress User"}),"\n",(0,s.jsx)(n.p,{children:"To kick things off, let's delve into the creation of a straightforward script that registers a user on a WordPress site.\nWe'll leverage the capabilities of the Simple JWT Login endpoint, which provides a user-friendly and efficient solution for user registration."}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:'Please note that, in order to be able to register a new user, you need have "Allow Register: yes" in the plugin settings.'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:'<?php\n$domain = "http://localhost:88";\n$headers = array(\n    "Content-Type: application/json"\n);\n$data = array(\n    "email" => "test". random_int(0, 10000). "@localhost.com",\n    "password" => "my secret password",\n    "first_name" => "my firstname",\n    "last_name" => "my last name",\n);\n\ntry{\n   // Step 1: Register User\n    $result = call("POST", $domain . "?rest_route=/simple-jwt-login/v1/users", $data, $headers);\n    $responseJSON = json_decode($result, true);\n    if ($responseJSON === false) {\n        throw new \\Exception("Response is not a JSON:", $result);\n    }\n\n    // In case of error, success will be false\n    if (!$responseJSON[\'success\']) {\n        throw new \\Exception($responseJSON[\'data\'][\'message\']);\n    }\n\n    $userID = $responseJSON[\'id\'];\n   $userID = $responseJSON[\'id\'];\n   echo "Your new user ID is: ". $userID . PHP_EOL;\n} catch (\\Exception $exception) {\n   // Unable to do the call\n   echo "Error while registering the user: ". $exception->getMessage() . PHP_EOL;\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"acquiring-the-jwt",children:"Acquiring the JWT"}),"\n",(0,s.jsx)(n.p,{children:"Once the user registration is complete, the next step is to obtain a JSON Web Token.\nThe JWT serves as a secure and efficient way to authenticate users without compromising sensitive information.\nEnsure that your WordPress site is configured to issue JWTs through Simple JWT Login."}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:'Please note that, in order to use the Authentication endpoint, you need have "Allow Authentication: yes" in the plugin settings.'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:'<?php\n$domain = "http://localhost:88";\n$headers = array(\n    "Content-Type: application/json"\n);\n$data = array (\n  "email" => "test@localhost.com",\n  "password" => "my secret password",\n);\n\ntry{\n    $result = call("POST", $domain . "?rest_route=/simple-jwt-login/v1/auth", $data, $headers);\n    $responseJSON = json_decode($result, true);\n    if ($responseJSON === false) {\n        throw new \\Exception("Auth response is not a JSON:", $result);\n    }\n    // In case of error, suscess will be false\n    if (!isset($responseJSON[\'success\']) || !$responseJSON[\'success\']) {\n        $error = "Error while getting the JWT";\n        if (isset($responseJSON[\'data\'][\'message\'])) {\n            $error .= $responseJSON[\'data\'][\'message\'];\n        }\n        throw new \\Exception($responseJSON[\'data\'][\'message\']);\n    }\n\n    if (!isset($responseJSON[\'data\'][\'jwt\'])) {\n        throw new \\Exception("The JWT is missing from API Response.");\n    }\n    // Your new JWT that you can use in other endpoints\n    $jwt = $responseJSON[\'data\'][\'jwt\'];\n    echo "Your new token is: ". $jwt;\n}catch (\\Exception $exception) {\n    echo "Error while trying to get the token: ". $exception->getMessage(). PHP_EOL;\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"validation-through-test-call-create-a-new-wordpress-post",children:"Validation Through Test Call: Create a new WordPress Post"}),"\n",(0,s.jsx)(n.p,{children:"With the JWT in hand, the final step involves performing a test call to validate its authenticity.\nThis is a crucial security measure to ensure that the token was issued correctly and is ready for use in subsequent authentication processes."}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:'In order to use the JWT on all endpoint, you need to enable "All WordPress endpoints checks for JWT authentication" from the plugin General Settings.'})}),"\n",(0,s.jsx)(n.p,{children:"In this example, we will create a new WordPress post:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:'<?php\n$domain = "http://localhost:88";   \n$jwt = "..."; // Replace with the JWT you obtained in the previous step\n$headers = array(\n    "Content-type: application/json",\n    "Authorization: " . $jwt\n);\n// New Post parameters\n$data = array(\n    "title" => "Post Title",\n    "excerpt" => "test",\n);\ntry {\n    $result = call("POST", $domain . "?rest_route=/wp/v2/posts", $data, $headers);\n    $responseJSON = json_decode($result, true);\n\n    // Final Step: Post create response\n    echo "Post create Response: " . print_r($responseJSON, true) . PHP_EOL;\n} catch (\\Exception $exception){\n  echo "Unable to create post:"  . $exception->getMessage();\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"full-example",children:"Full Example"}),"\n",(0,s.jsx)(n.p,{children:"Within this segment, you'll find a comprehensive illustration covering the following:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Registering a user on WordPress"}),"\n",(0,s.jsx)(n.li,{children:"Obtaining a JSON Web Token (JWT)"}),"\n",(0,s.jsx)(n.li,{children:"Creating a new post on your WordPress website"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:'<?php\n\n/**\n * @param $method string Can be one of the following: GET, POST, PUT, DELETE\n * @param $endpoint string Endpoint where we will do the call\n * @param $data array Parameters that needs to be sent to the endpoint\n * @param $headers array Request headers\n * @return string\n * @throws \\Exception\n *\n */\nfunction call($method, $endpoint, $data = array(), $headers = array())\n{\n    // Initialize cURL session\n    $ch = curl_init();\n\n    // Set the cURL options\n    curl_setopt($ch, CURLOPT_URL, $endpoint);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, strtoupper($method));\n    curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));\n    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n\n    // Execute cURL session and get the result\n    $result = curl_exec($ch);\n\n    // Check for cURL errors\n    if (curl_errno($ch)) {\n        throw new \\Exception(curl_error($ch));\n    }\n\n    // Close cURL session\n    curl_close($ch);\n\n    return $result;\n}\n\n$domain = "http://localhost:88";\n$headers = array(\n    "Content-Type: application/json"\n);\n$data = array(\n    "email" => "test". random_int(0, 10000). "@localhost.com",\n    "password" => "my secret password",\n    "first_name" => "my firstname",\n    "last_name" => "my last name",\n);\n\ntry {\n    // Step 1: Register User\n    $result = call("POST", $domain . "?rest_route=/simple-jwt-login/v1/users", $data, $headers);\n    $responseJSON = json_decode($result, true);\n    if ($responseJSON === false) {\n        throw new \\Exception("Response is not a JSON:", $result);\n    }\n\n    var_dump($responseJSON);\n    // In case of error, suscess will be false\n    if (!$responseJSON[\'success\']) {\n        throw new \\Exception($responseJSON[\'data\'][\'message\']);\n    }\n\n    $userID = $responseJSON[\'id\'];\n\n    // Step 2: Get a JWT\n    $result = call("POST", $domain . "?rest_route=/simple-jwt-login/v1/auth", $data, $headers);\n    $responseJSON = json_decode($result, true);\n    if ($responseJSON === false) {\n        throw new \\Exception("Auth response is not a JSON:", $result);\n    }\n    // In case of error, suscess will be false\n    if (!isset($responseJSON[\'success\']) || !$responseJSON[\'success\']) {\n        $error = "Error while getting the JWT";\n        if (isset($responseJSON[\'data\'][\'message\'])) {\n            $error .= $responseJSON[\'data\'][\'message\'];\n        }\n        throw new \\Exception($responseJSON[\'data\'][\'message\']);\n    }\n\n    if (!isset($responseJSON[\'data\'][\'jwt\'])) {\n        throw new \\Exception("The JWT is missing from API Response.");\n    }\n    // Your new JWT that you can use in other endpoints\n    $jwt = $responseJSON[\'data\'][\'jwt\'];\n\n    // Step 3: Create a new WordPress post\n    $headers = array(\n        "Content-type: application/json",\n        "Authorization: " . $jwt\n    );\n    $data = array(\n        "title" => "Post Title",\n        "excerpt" => "test",\n    );\n\n    $result = call("POST", $domain . "?rest_route=/wp/v2/posts", $data, $headers);\n    $responseJSON = json_decode($result, true);\n\n    // Final Step: Post have been created\n    echo "Post have been created: " . print_r($responseJSON, true) . PHP_EOL;\n\n} catch (\\Exception $exception) {\n    echo "There was an error: " . $exception->getMessage() . PHP_EOL;\n}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var s=t(6540);const r={},o=s.createContext(r);function a(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);